# -*- coding: utf-8 -*-
"""
有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

 

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
示例 2：

输入："(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
示例 3：

输入："()()"
输出：""
解释：
输入字符串为 "()()"，原语化分解得到 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。
 

提示：

S.length <= 10000
S[i] 为 "(" 或 ")"
S 是一个有效括号字符串



解题思路：
1、使用栈的特性
1.1、定义个stack和res结果集
1.2、遍历S
1.3、遇到左括号，将元素加入stack，同时判断stack的长度>1，将res+="(",意味着将第一个"("删除
1.4、遇到右括号，将stack最后元素pop出来，同时判断stack的长度只要！=0，res+=")",意味着当stack为空的时候，就不再给res加")",换一句话说，删除了右括号

"""


class Solution:
    def removeOuterParentheses(self, S: str) -> str:
        stack, res = [], ""
        for i in S:
            if i == "(":
                stack.append(i)
                if len(stack) > 1:
                    res += "("
            else:
                stack.pop()
                if len(stack) != 0:
                    res += ")"
        return res
